class Solution {
    
public:
    int parent[100009]={0};
    void dsu(int n)
    {
        for(int i=1;i<=n;i++)
            parent[i]=i;
    }
    int root(int a)
    {
        while(parent[a] != a)
        {
            parent[a]=parent[parent[a]];
            a=parent[a];
        }
        return a;
    }
    void union1(int a ,int b)
    {
        int root_a =root(a);
        int root_b = root(b);
        parent[root_a]=root_b;
    }
    int largestComponentSize(vector<int>& A) 
    {
        int n= *max_element(A.begin(),A.end());
        dsu(n+1);
        for(int i=0;i<A.size();i++)
        {
            for(int j=2;j<=sqrt(A[i]);j++)
            {
                if(A[i]%j==0)
                {
                    union1(A[i],j);
                    union1(A[i],(A[i]/j));
                }
            }
        }
        unordered_map<int,int> m;
        int ans=1;
        for(int i=0;i<A.size();i++)
        {
            ans=max(ans,++m[root(A[i])]);
        }
        return ans;
        
        
    }
};
