/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;

    Node() {}

    Node(int _val, Node* _next, Node* _random) {
        val = _val;
        next = _next;
        random = _random;
    }
};
*/
class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(head==NULL)
            return NULL;
        Node* p=head;
        while(p != NULL)
        {
            Node* q=new Node(p->val,NULL,NULL);
            q->next=p->next;
            p->next=q;
            p=p->next->next;
        }
        p=head;
        while(p != NULL)
        {
            if(p->random != NULL)
            {
                p->next->random=p->random->next;
                
            }
            p=p->next->next;
        }
        
        Node* original=head;
        Node* copy=head->next;
        Node *temp=copy;
        while (original && copy) 
        { 
        original->next = 
         original->next? original->next->next :NULL;   
        copy->next = copy->next?copy->next->next:NULL; 
        original = original->next; 
        copy = copy->next; 
        } 
        return temp;
        
        
    }
};
