/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
struct compare
{
    bool operator()(ListNode *x,ListNode* y)
    {
        return x->val>y->val;
    }
};

public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        ListNode* head=NULL,*last=NULL;
        priority_queue<ListNode*,vector<ListNode*>,compare> q;
        int n = lists.size();
        for(int i=0;i<n;i++)
        {
            if(lists[i] !=NULL)
            q.push(lists[i]);
        }
        while(!q.empty())
        {
            ListNode* front=q.top();
            q.pop();
            if(front->next !=NULL)
            {
                q.push(front->next);
            }
            front->next=NULL;
            if(head==NULL)
            {
                head=front;
                last=front;
            }
            else
            {
                last->next=front;
                last=front;
            }
        }
        return head;
        
    }
};
